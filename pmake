#!/usr/bin/perl
# Maximillian Nibler mnibler@ucsc.edu

use strict;
use warnings;

my %lineHash;
my $countT;
my $countR;
my $key;

sub resetCount{
    $countT = 0;
    $countR = 0;
}
sub addToList{
    my %listStruct;
    my $addLine = "@_";
    $addLine = storeRecipe ("$addLine");
    $lineHash{"$key"}{"rec"}{"$countR"} = "$addLine";
    $countR ++;
    #print "$listStruct{head}"
    #return %listHead;
}

#read in the Makefile
resetCount();
open(DATA, "<Makefile") or die "Couldn't open file Makefile, $!";
while(<DATA>) {
    my $parse = "$_";
    my $line = $parse =~ m/#/? "$`" : "$parse";
    parseLine ($line);
}
sub extMacro {
    my $inpLine;
    $inpLine = "@_";
    my $mac = $inpLine =~ m/:/? "$`" : "error extract macro \n";
    return $mac;
}
sub extTargets{
    my $tarLine;
    my $inpline = "@_";
    $tarLine = $inpline =~ m/:/? "$'" : "error";
    $tarLine =~ tr/ \n//ds;
    #print "$tarLine\n";
    $lineHash{"$key"}{"tar"}{"$countT"} = "$tarLine";
    $countT ++;
}
sub storeRecipe{
    my $recipeLine;
    $recipeLine = "@_";
    $recipeLine =~ tr/ \n//ds;
    return $recipeLine;
}
#store
sub parseLine {
    my $nxtLine = "@_";
    if ($nxtLine =~ /^(\S+)\s*:\s*(.*?)\s*$/) {
        resetCount();
        $key = extMacro ("@_");
        extTargets ("@_"); 
    } elsif ($nxtLine =~ /^\s*$/){
        
    } else {
        addToList("@_");
    }
    #print "$key\n";
}
#my $time;
#$time = $lineHash{"%"}{"rec"}{1};
#print "$time"; 
my %strsignal = (
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   11 => "Segmentation fault",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped",
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);
