#!/usr/bin/perl
# Maximillian Nibler mnibler@ucsc.edu

use strict;
use warnings;

my %lineHash;
my %depsHash;
my %wildHash;
our $count;
our $countT;
my $countR;
my $key;
my @keyArr;
my $j;
our $targ;
our $sysret;
our $deps;
our $depname;
our @splitLine;
our $macs;
our $bashout;
#read in the Makefile
resetCount();
open(DATA, "<Makefile") or die "Couldn't open file Makefile, $!";
#print "$ARGV[0]";
while(<DATA>) {
    my $parse = "$_";
    my $line = $parse =~ m/#/? "$`" : "$parse";
    #print "$line";
    parseLine ($line);
}
wildCard();
#system( "$ARGV[0]" );
our $i = 0;
our $temp;
while ($ARGV[$i]){
    #print "looped";
    $temp = "$ARGV[$i]";
    if (callMacro("$temp")){
        print "pmake: '$key' is up to date.\n"
    }
    $i ++;
    resetCount();
}
if ($i == 0){
    local $temp = $keyArr[0];
    #print "this is the source";
    if (callMacro("$temp")){
        print "pmake: Nothing to be done for '$temp'.\n"
    }
}
sub wildCard {
    local $count = 0;
    local $targ;
    local $macs = $keyArr[$count];
    while ($macs){
	$count ++;
	if ($macs =~ /%/){
	    $targ = "$'";
	    $macs = $keyArr[$count];
	    $count++;
            local $i = 0;
            local $countT = 0;
            local $deps = $keyArr[$i];
            local $depname;
	 #   print "Testing 1 2 3: \n";
            while ($i < $count){
                while ($depname){
	#	    print "$depname == $targ\n";
		    if ($depname =~ /$targ/){
	#		print "hello world $#keyArr $keyArr[$#keyArr]\n";
	                $keyArr[$#keyArr + 1] = $depname;
	            }
		    $countT++;
		    $depname = $lineHash{$deps}{"tar"}{$countT};
		}
		$countT = 0;
		$i++;
		$deps = $keyArr[$i];
		$depname = $lineHash{$deps}{"tar"}{$countT};
	    }
	}
	if ($targ){
	    $macs =~ m/\Q$targ/? wildParse("$macs", '%'."$targ") : 0;
	}
        $macs = $keyArr[$count];
    }
}
sub wildParse {
    local @splitLine = split ( / /, "@_");
    #print "$splitLine[1] $splitLine[0] :";
    local $count = 0;
    local $targ = $splitLine[0] =~ m/\Q./? "$`" : 0;
    local $deps = $lineHash{"$splitLine[1]"}{"tar"}{0};
    $deps =~ s/%/$targ/;
    #print " $targ $deps\n";
    local $macs = $lineHash{$splitLine[1]}{"rec"}{$count};
    while ($macs){
        $macs =~ s/\$(<)/$deps/g;
	#print "$macs ++++\n";
        $lineHash{$splitLine[0]}{"rec"}{$count} = "$macs";
        $count++;
        $macs = $lineHash{$splitLine[1]}{"rec"}{$count};
    }
}
sub callMacro{
    local $sysret;
    local $macs = "@_";
    my %targets = map { $_ => 1 } @keyArr;
    local $count = 0;
    local $temp = $lineHash{"$macs"}{"tar"}{"$count"};
    #print "Fresh call $macs\n";
    while($temp){
        $count ++;
        #print "start targ $macs temp $temp $count\n";
        if (exists($targets{"$temp"})){
            #print "hoorah $temp\n";
            $sysret = callMacro($temp);
        }
        #print "test loop $temp $count\n";
        #$countT ++;                                                                                                               
        $temp = $lineHash{"$macs"}{"tar"}{"$count"};
        #print "test $targ $temp $countT\n";                      
    }
    if ($lineHash{$macs}{"rec"}{0}){
        #print "this is $macs\n";
        $sysret = bashLoop ("$macs");
    }
    return $sysret;
}
sub fileTime {
    my @filestat = stat "@_";
    if (@filestat) {
        #print "@_ ";
        my $mtime = $filestat[9];
        #print "$mtime \n";
        return $mtime;
    }
    #print "no file";
    return 0;
}
sub parseAt{
    $temp = "@_";
    $temp =~ m/@/;
    $temp = "$'";
    $temp =~ s/^\s+|\s+$//g;
    sysfun ( "$temp" );
}
sub parseGCC {
    local $targ;
    local $deps;
    local $depname;
    local @splitLine;
    local $macs = "@_";
    @splitLine = split ( / / , "@_" );
    $targ = "$lineHash{$key}{tar}{0}";
    $depname = $splitLine[-1];
    if ($macs =~ m/-c/){
	$targ = "$depname";
        $depname = "$key";
    }
    $targ = fileTime ("$targ");
    $deps = fileTime ("$depname");
    #print "$deps $targ @_\n";
    if ( $deps < $targ ){                                                                                       
        print "@_\n";
        return sysfun ("@_");
        
    }elsif ($deps == 0 or $targ == 0){
        print "@_\n";
        return sysfun ("@_");
      
    }elsif ($deps > $targ){
	return 1;
    }else {
        #print "$deps $targ @_\n";
        #print "pmake: Nothing to be done for '$depname'.\n";
        #print "@_\n";
        return 1;
	#return 
    }
}
sub sysfun {
    local $sysret;
    system(@_);
    $sysret = "$?" / 256;
    if ($? == -1) {
	print "pmake: *** [Makefile: : $key] Error $?\n";
        exit;
    }
    elsif ($? & 127) {
        print "pmake: *** [Makefile: : $key] Error $sysret\n";
        exit;
    }
    elsif ($? == 0) {
        #print "no problems";
        return 0;
        #print "pmake: *** [Makefile: : $key] Error $sysret\n";
    }
    else {
        return 1;
    } 
}
sub parseHyphen {
    local $temp = "@_";
    $temp =~ m/-/;
    $temp = "$'";
    $temp =~ s/^\s+|\s+$//g;
    local $sysret = "$?" / 256;
    print "$temp\n";
    system ("$temp");
    if ($? == -1) {
        print "pmake: *** [Makefile: : $key] Error $? (ignored)\n";
    }
    elsif ($? & 127) {
        print "pmake: *** [Makefile: : $key] Error $sysret (ignored)\n";
    }
    elsif ($? == 0){
	
    }else{
        print "pmake: *** [Makefile: : $key] Error $sysret (ignored)\n";
    }
    return 0;
}

sub bashLoop {
    #print "Key call: @_\n";
    $key = "@_";
    resetCount();
    local $bashout;
    local $macs;
    local $temp;
    $bashout = $lineHash{"$key"}{"rec"}{"$countR"};
    #print "this $bashout \n";
    if ($bashout){ 
        while ($bashout){
            if ($bashout =~ /^@\s\S+/){
                parseAt ( "$bashout" );
            }elsif ($bashout =~ /^gcc\s\S+/){
                $macs = parseGCC ( "$bashout" );
                #print "$macs";
                return $macs;
            }elsif ($bashout =~ /^-\s\S+/){
                return parseHyphen("$bashout");
            }else {
                print ("$bashout\n");
                sysfun ( "$bashout" );
            }
            #print "$bashout\n";
            $countR ++;
            $bashout = $lineHash{"$key"}{"rec"}{"$countR"};
        }
    }elsif ($key){
        $temp = $key;
        $key = $lineHash{"$key"}{"tar"}{0};
        #print "why would this get called";
        $macs = bashLoop ("$key");
        if ($macs){
            print "pmake: Nothing to be done for '$temp'.\n";
        } 
	0;
    }
}
sub replaceDeps {
    local $deps = "@_";
    local $temp;
    if ($deps =~ /(\D){(\S+)}/){
        $depname = "$&";
        $temp = $depname;
        $temp =~ s/}//g;
        $temp =~ s/{//g;
        $temp =~ s/\D//;
        #print "$depname the temp\n";
        $temp = $depsHash{"$temp"};
        #print "$deps : '$temp' '$depname'\n";
        $deps =~ s/\Q$depname/$temp/g;
        #print "$deps\n";
        return replaceDeps ("$deps");
    }
    return $deps;
}
sub resetCount{
    $countT = 0;
    $countR = 0;
}
sub addToList{
    my $addLine = "@_";
    $addLine = storeRecipe ("$addLine");
    $addLine = replaceDeps ("$addLine");
    $lineHash{"$key"}{"rec"}{"$countR"} = "$addLine";
    $countR ++;
    #print "$listStruct{head}";
    #return %listHead; 
}
sub extMacro {
    my $inpLine;
    $inpLine = "@_";
    my $mac = $inpLine =~ m/:/? "$`" : "error extract macro \n";
    $mac =~ s/^\s+|\s+$//g;
    return $mac;
}
sub extTargets{
    local $countT = 0;
    my $tarLine;
    my $inpline = "@_";
    $tarLine = $inpline =~ m/:/? "$'" : "error";
    $tarLine =~ s/^\s+|\s+$//g;
    $tarLine = replaceDeps ("$tarLine");
    local @splitLine = split ( / / , $tarLine );
    $tarLine = $splitLine[$countT];
    while ($tarLine){
        #print "$key $countT $tarLine\n";
        $lineHash{"$key"}{"tar"}{"$countT"} = "$tarLine";
        $countT ++;
        $tarLine = $splitLine[$countT];
    }
    #print " finished \n";
}
sub storeRecipe{
    my $recipeLine;
    $recipeLine = "@_";
    $recipeLine =~ s/^\s+|\s+$//g;
    return $recipeLine;
}
#store
sub parseLine {
    #print "this is the correct function right>";
    my $nxtLine = "@_";
    if ($nxtLine =~ /^(\S+)\s*:\s*(.*?)\s*$/) {
        resetCount();
        $key = extMacro ("@_");
        $key = replaceDeps("$key");
        my $KAsize = $#keyArr + 1;
        $keyArr[$KAsize] = "$key";
        extTargets ("@_");
    } elsif ($nxtLine =~ m/=/){
        local $deps = "$`";
        local $targ = "$'";
        $deps =~ s/^\s+|\s+$//g;
        $targ =~ s/^\s+|\s+$//g;
        #print "$targ $deps\n";
        $depsHash{$deps} = "$targ";
    } elsif ($nxtLine =~ /^\s*$/){
    
    } else {
        addToList("@_");
    }
    #print "$key\n";
}
#my $time;
#$time = $lineHash{"%"}{"rec"}{1};
#print "$time"; 
my %strsignal = (
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   11 => "Segmentation fault",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped", 
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);
