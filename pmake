#!/usr/bin/perl
# Maximillian Nibler mnibler@ucsc.edu

use strict;
use warnings;

my %lineHash;
my $countT;
my $countR;
my $key;
my @keyArr;

#read in the Makefile
resetCount();
open(DATA, "<Makefile") or die "Couldn't open file Makefile, $!";
#print "$ARGV[0]";
while(<DATA>) {
    my $parse = "$_";
    my $line = $parse =~ m/#/? "$`" : "$parse";
    #print "$line";
    parseLine ($line);
}
#system( "$ARGV[0]" );
my $i = 0;
my $temp;
while ($ARGV[$i]){
    #print "looped";
    $temp = "$ARGV[$i]";
    bashLoop("$temp");
    $i ++;
}
if ($i == 0){
    $key = $keyArr[0];
    if (bashLoop("$key")){
        print "pmake: '$key' is up to date.\n"
    }
}
sub fileTime {
    my @filestat = stat "@_";
    if (@filestat) {
        #print "@_ ";
        my $mtime = $filestat[9];
        #print "$mtime ";
        return $mtime;
    }
    #print "no file";
    return 0;
}
sub parseAt{
    $temp = "@_";
    $temp =~ m/@/;
    $temp = "$'";
    $temp =~ s/^\s+|\s+$//g;
    sysfun ( "$temp" );
}
sub parseGCC {
    my $targ;
    my $deps;
    my $depname;
    my @splitLine;
    @splitLine = split ( / / , "@_" );
    $targ = "$lineHash{$key}{tar}{0}";
    $targ = fileTime ("$targ");
    $depname = $splitLine[-1];
    $deps = fileTime ("$depname");
    if ( $deps < $targ ){
        print "@_\n";
        sysfun ("@_");
        return 0;
    }else {
        #print "$deps $targ @_\n";
        #print "pmake: '$depname' is up to date.\n";
        return 1;
    }
}
sub sysfun {
    my $sysret;
    system(@_);
    $sysret = "$?" / 256;
    if ($? == -1) {
	print "pmake: *** [Makefile: : $key] Error $?\n";
    }
    elsif ($? & 127) {
        print "pmake: *** [Makefile: : $key] Error $sysret\n";
    }
    else {
        print "pmake: *** [Makefile: : $key] Error $sysret\n";
    }
}
sub bashLoop {
    #print "@_";
    $key = "@_";
    resetCount();
    my $bashout;
    $bashout = $lineHash{"$key"}{"rec"}{"$countR"};
    if ($bashout){ 
        while ($bashout){
            if ($bashout =~ /^@\s\S+/){
                parseAt ( "$bashout" );
            }elsif ($bashout =~ /^gcc\s\S+/){
                return parseGCC ( "$bashout" );
            }else {
                print ("$bashout\n");
                sysfun ( "$bashout" );
            }
            #print "$bashout\n";
            $countR ++;
            $bashout = $lineHash{"$key"}{"rec"}{"$countR"};
        }
    }else {
        my $macs;
        $key = $lineHash{"$key"}{"tar"}{0};
        $macs = bashLoop ("$key");
        if ($macs){
            print "pmake: Nothing to be done for '$key'.\n";
        } 
	0;
    }
}
sub resetCount{
    $countT = 0;
    $countR = 0;
}
sub addToList{
    my $addLine = "@_";
    $addLine = storeRecipe ("$addLine");
    $lineHash{"$key"}{"rec"}{"$countR"} = "$addLine";
    $countR ++;
    #print "$listStruct{head}";
    #return %listHead; 
}
sub extMacro {
    my $inpLine;
    $inpLine = "@_";
    my $mac = $inpLine =~ m/:/? "$`" : "error extract macro \n";
    $mac =~ s/^\s+|\s+$//g;
    return $mac;
}
sub extTargets{
    my $tarLine;
    my $inpline = "@_";
    $tarLine = $inpline =~ m/:/? "$'" : "error";
    $tarLine =~ s/^\s+|\s+$//g;
    #print "$tarLine\n";
    $lineHash{"$key"}{"tar"}{"$countT"} = "$tarLine";
    $countT ++;
}
sub storeRecipe{
    my $recipeLine;
    $recipeLine = "@_";
    $recipeLine =~ s/^\s+|\s+$//g;
    return $recipeLine;
}
#store
sub parseLine {
    my $nxtLine = "@_";
    if ($nxtLine =~ /^(\S+)\s*:\s*(.*?)\s*$/) {
        resetCount();
        $key = extMacro ("@_");
        my $KAsize = $#keyArr + 1;
        $keyArr[$KAsize] = "$key";
        extTargets ("@_"); 
    } elsif ($nxtLine =~ /^\s*$/){
        
    } else {
        addToList("@_");
    }
    #print "$key\n";
}
#my $time;
#$time = $lineHash{"%"}{"rec"}{1};
#print "$time"; 
my %strsignal = (
    1 => "Hangup",
    2 => "Interrupt",
    3 => "Quit",
    4 => "Illegal instruction",
    5 => "Trace/breakpoint trap",
    6 => "Aborted",
    7 => "Bus error",
    8 => "Floating point exception",
    9 => "Killed",
   11 => "Segmentation fault",
   13 => "Broken pipe",
   14 => "Alarm clock",
   15 => "Terminated",
   16 => "Stack fault",
   17 => "Child exited",
   18 => "Continued",
   19 => "Stopped (signal)",
   20 => "Stopped", 
   21 => "Stopped (tty input)",
   22 => "Stopped (tty output)",
   24 => "CPU time limit exceeded",
   25 => "File size limit exceeded",
   26 => "Virtual timer expired",
   27 => "Profiling timer expired",
   28 => "Window changed",
   29 => "I/O possible",
   30 => "Power failure",
   31 => "Bad system call",
);
